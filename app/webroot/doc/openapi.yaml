openapi: 3.0.0
info:
  version: 1.0.0
  title: MISP API
servers:
  - url: /
tags:
  - name: Attributes
    description: Attributes in MISP can be network indicators (e.g. IP address), system indicators (e.g. a string in memory) or even bank account details.
    externalDocs:
      url: https://www.circl.lu/doc/misp/GLOSSARY.html#misp-attribute
  - name: Events
    description: MISP events are encapsulations for contextually related information represented as attribute and object.
    externalDocs:
      url: https://www.circl.lu/doc/misp/GLOSSARY.html#misp-event
paths:
  /attributes/add/{eventId}:
    post:
      summary: "Add an attribute"
      operationId: addAttribute
      tags:
        - Attributes
      parameters:
        - $ref: "#/components/parameters/eventIdParameter"
      requestBody:
        $ref: "#/components/requestBodies/AddAttributeRequest"
      responses:
        "200":
          $ref: "#/components/responses/AttributeResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        default:
          $ref: "#/components/responses/ApiError"

  /attributes/edit/{attributeId}:
    put:
      summary: "Edit an attribute"
      operationId: editAttribute
      tags:
        - Attributes
      parameters:
        - $ref: "#/components/parameters/attributeIdParameter"
      requestBody:
        $ref: "#/components/requestBodies/EditAttributeRequest"
      responses:
        "200":
          $ref: "#/components/responses/AttributeResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        "404":
          $ref: "#/components/responses/NotFoundApiError"
        default:
          $ref: "#/components/responses/ApiError"

  /attributes/delete/{attributeId}:
    delete:
      summary: "Delete an attribute"
      operationId: deleteAttribute
      tags:
        - Attributes
      parameters:
        - $ref: "#/components/parameters/attributeIdParameter"
      responses:
        "200":
          $ref: "#/components/responses/DeleteAttributeResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        "404":
          $ref: "#/components/responses/NotFoundApiError"
        default:
          $ref: "#/components/responses/ApiError"

  /attributes:
    get:
      summary: "Get a list of attributes"
      operationId: getAttributes
      tags:
        - Attributes
      responses:
        "200":
          $ref: "#/components/responses/AttributeListResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        default:
          $ref: "#/components/responses/ApiError"

  /attributes/view/{attributeId}:
    get:
      summary: "Get an attribute by ID"
      operationId: viewAttribute
      tags:
        - Attributes
      parameters:
        - $ref: "#/components/parameters/attributeIdParameter"
      responses:
        "200":
          $ref: "#/components/responses/AttributeResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        default:
          $ref: "#/components/responses/ApiError"

  /attributes/restSearch:
    post:
      summary: "Get a filtered and paginated list of attributes"
      operationId: restSearchAttributes
      tags:
        - Attributes
      parameters:
        - $ref: "#/components/parameters/returnFormatParameter"
      requestBody:
        $ref: "#/components/requestBodies/AttributesRestSearchRequest"
      responses:
        "200":
          $ref: "#/components/responses/AttributesRestSearchResponse"
        "403":
          $ref: "#/components/responses/UnauthorizedApiError"
        default:
          $ref: "#/components/responses/ApiError"

components:
  schemas:
    AttributeId:
      type: string
      format: int64
      example: "12345"

    AttributeType:
      type: string
      maxLength: 100
      example: "ip-src"

    AttributeValue:
      type: string
      maxLength: 131071
      example: "127.0.0.1"

    AttributeCategory:
      type: string
      maxLength: 255
      example: "Payload delivery"

    AttributeComment:
      type: string
      maxLength: 65535
      example: "logged source ip"

    EventId:
      type: string
      format: int64
      example: "12345"

    EventInfo:
      type: string
      maxLength: 65535
      example: "logged source ip"

    ObjectId:
      type: string
      format: int64
      example: "12345"
      default: "0"

    ObjectRelation:
      type: string
      maxLength: 255
      default: null

    DistributionLevel:
      type: string
      format: int32
      enum: ["0", "1", "2", "3", "4"]
      description: >
        Who will be able to see this event once it becomes published and eventually when it becomes pulled:
          * `0` - Your organization only
          * `1` - This community only
          * `2` - Connected communities
          * `3` - All communities
          * `4` - Sharing group

    ThreatLevel:
      type: string
      format: int32
      enum: ["1", "2", "3", "4"]
      description: >
        Represents the threat level.
          * `1` - High
          * `2` - Medium
          * `3` - Low
          * `4` - Undefined
    ToIDS:
      type: boolean
      default: true

    SharingGroupId:
      type: string
      format: int64
      example: "1"

    UUID:
      type: string
      format: uuid
      maxLength: 40
      example: "c99506a6-1255-4b71-afa5-7b8ba48c3b1b"

    Timestamp:
      type: string
      format: int64
      default: "0"
      example: "1617875568"

    MicroTimestamp:
      type: string
      format: int64
      default: null
      example: "1581984000000000"

    SoftDeletedFlag:
      type: boolean
      default: false

    DisableCorrelationFlag:
      type: boolean
      default: false

    OrganisationId:
      type: string
      format: int64
      example: "12345"

    OrganisationName:
      type: string
      maxLength: 255
      example: "ORGNAME"

    AttributeNoId:
      type: object
      properties:
        event_id:
          $ref: "#/components/schemas/EventId"
        object_id:
          $ref: "#/components/schemas/ObjectId"
        object_relation:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ObjectRelation"
        category:
          $ref: "#/components/schemas/AttributeCategory"
        type:
          $ref: "#/components/schemas/AttributeType"
        value:
          $ref: "#/components/schemas/AttributeValue"
        to_ids:
          $ref: "#/components/schemas/ToIDS"
        uuid:
          $ref: "#/components/schemas/UUID"
        timestamp:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Timestamp"
        distribution:
          $ref: "#/components/schemas/DistributionLevel"
        sharing_group_id:
          $ref: "#/components/schemas/SharingGroupId"
        comment:
          $ref: "#/components/schemas/AttributeComment"
        deleted:
          $ref: "#/components/schemas/SoftDeletedFlag"
        disable_correlation:
          $ref: "#/components/schemas/DisableCorrelationFlag"
        first_seen:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/MicroTimestamp"
        last_seen:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/MicroTimestamp"

    Attribute:
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/AttributeId"
        - $ref: "#/components/schemas/AttributeNoId"

    EventNoId:
      type: object
      properties:
        org_id:
          $ref: "#/components/schemas/OrganisationId"
        distribution:
          $ref: "#/components/schemas/DistributionLevel"
        info:
          $ref: "#/components/schemas/EventInfo"
        orgc_id:
          $ref: "#/components/schemas/OrganisationId"
        uuid:
          $ref: "#/components/schemas/UUID"

    Event:
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/EventId"
        - $ref: "#/components/schemas/EventNoId"

    AttributeList:
      type: array
      items:
        $ref: "#/components/schemas/Attribute"

    AttributeRestSearchList:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Attribute"
          - type: object
            properties:
              Event:
                $ref: "#/components/schemas/Event"

    DeleteAttributeResponse:
      type: object
      properties:
        message:
          type: string
          example: Attribute deleted.

    PageRestSearchFilter:
      type: integer
      format: int32
      nullable: true
      minimum: 0

    LimitRestSearchFilter:
      type: integer
      format: int32
      nullable: true
      minimum: 0

    AttributesDateRestSearchFilter:
      description: "The user set date field on the event level. You can use any of the valid time related filters (examples: 7d, timestamps, [14d, 7d] for ranges, etc.)"
      type: string
      nullable: true

    AttributesLastRestSearchFilter:
      description: "Events published within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m)"
      type: integer
      nullable: true

    AttributesTagsRestSearchFilter:
      nullable: true
      type: array
      items:
        type: string
        example: "tlp:amber"

    ApiError:
      type: object
      required:
        - name
        - message
        - url
      properties:
        name:
          type: string
        message:
          type: string
        url:
          type: string
          example: "/attributes"

    UnauthorizedApiError:
      type: object
      required:
        - name
        - message
        - url
      properties:
        name:
          type: string
          example: "Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header."
        message:
          type: string
          example: "Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header."
        url:
          type: string
          example: "/attributes"

    NotFoundApiError:
      type: object
      required:
        - name
        - message
        - url
      properties:
        name:
          type: string
          example: "Invalid attribute"
        message:
          type: string
          example: "Invalid attribute"
        url:
          type: string
          example: "/attributes/1234"

  parameters:
    eventIdParameter:
      name: eventId
      in: path
      description: UUID or numeric ID of the event
      required: true
      schema:
        anyOf:
          - $ref: "#/components/schemas/EventId"
          - $ref: "#/components/schemas/UUID"

    attributeIdParameter:
      name: attributeId
      in: path
      description: UUID or numeric ID of the attribute
      required: true
      schema:
        anyOf:
          - $ref: "#/components/schemas/AttributeId"
          - $ref: "#/components/schemas/UUID"

    returnFormatParameter:
      name: returnFormat
      in: query
      description: Return type of the restSearch query.
      required: true
      schema:
        type: string
        enum:
          - json
          - xml
          - download
          - stix

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

  requestBodies:
    AddAttributeRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeNoId"

    EditAttributeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/Attribute"

    AttributesRestSearchRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                $ref: "#/components/schemas/PageRestSearchFilter"
              limit:
                $ref: "#/components/schemas/LimitRestSearchFilter"
              value:
                $ref: "#/components/schemas/AttributeValue"
              type:
                $ref: "#/components/schemas/AttributeType"
              category:
                $ref: "#/components/schemas/AttributeCategory"
              org:
                anyOf:
                  - $ref: "#/components/schemas/OrganisationId"
                  - $ref: "#/components/schemas/OrganisationName"
              tags:
                $ref: "#/components/schemas/AttributesTagsRestSearchFilter"
              date:
                $ref: "#/components/schemas/AttributesDateRestSearchFilter"
              last:
                $ref: "#/components/schemas/AttributesLastRestSearchFilter"
              eventid:
                $ref: "#/components/schemas/EventId"
              withAttachments:
                description: "Extends the response with the base64 representation of the attachment, if there is one"
                type: boolean
                default: false
              uuid:
                $ref: "#/components/schemas/UUID"
              publish_timestamp:
                $ref: "#/components/schemas/Timestamp"
              timestamp:
                $ref: "#/components/schemas/Timestamp"
              attribute_timestamp:
                description: "The timestamp at which the attribute was last modified"
                $ref: "#/components/schemas/Timestamp"
              enforceWarninglist:
                description: "Should the warning list be enforced. Adds blocked field for matching attributes"
                type: boolean
                default: false
              to_ids:
                description: "The state of the `to_ids` flag"
                $ref: "#/components/schemas/ToIDS"
              deleted:
                description: "Include deleted elements"
                $ref: "#/components/schemas/SoftDeletedFlag"
              event_timestamp:
                description: "The timestamp at which the event was last modified"
                $ref: "#/components/schemas/Timestamp"
              threat_level_id:
                $ref: "#/components/schemas/ThreatLevel"
              eventinfo:
                description: "Quick event description"
                type: string
              decayingModel:
                description: "Specify the decaying model from which the decaying score should be calculated"
                type: string
              score:
                description: "An alias to override on-the-fly the threshold of the decaying model"
                type: string
              first_seen:
                description: "Seen within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m)"
                type: string
              last_seen:
                description: "Seen within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m)"
                type: string
              includeEventUuid:
                description: "Include matching eventUuids in the response"
                type: boolean
                default: false
              includeEventTags:
                description: "Include tags of matching events in the response"
                type: boolean
                default: false
              includeProposals:
                description: "Include proposals of matching events in the response"
                type: boolean
                default: false
              includeDecayScore:
                description: "Include all enabled decaying score"
                type: boolean
                default: false
              includeFullModel:
                description: "Include all model information of matching events in the response"
                type: boolean
                default: false
              excludeDecayed:
                description: "Should the decayed elements by excluded"
                type: boolean
                default: false

  responses:
    AttributeResponse:
      description: "An attribute"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"

    AttributeListResponse:
      description: "A list of attributes"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeList"

    DeleteAttributeResponse:
      description: "Delete attribute response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteAttributeResponse"

    AttributesRestSearchResponse:
      description: "Rest search attributes response"
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                type: object
                properties:
                  Attribute:
                    $ref: "#/components/schemas/AttributeRestSearchList"

    ApiError:
      description: "Unexpected API error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"

    NotFoundApiError:
      description: "The specified resource was not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundApiError"

    UnauthorizedApiError:
      description: "Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedApiError"

security:
  - ApiKeyAuth: []
